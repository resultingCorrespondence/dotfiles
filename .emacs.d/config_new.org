* Delimiters
** rainbow-delimters
#+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Smart-parens
#+BEGIN_SRC emacs-lisp
    (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
    (use-package evil-smartparens
	:ensure t
	:config
	(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))
#+END_SRC

* Calendar
** Setup
   #+BEGIN_SRC emacs-lisp
     (use-package calfw
       :ensure t
       :config
       (use-package org-gcal
	 :ensure t
	 :config
	 (setq org-gcal-client-id "960315237881-r8j4ldivpl98il5ifoupdaskj51j65ib.apps.googleusercontent.com"
	   org-gcal-client-secret "Rb1t5gqNLOjyPQ2l9fy5i7LZ"
	   org-gcal-file-alist '(("hgaines95@gmail.com" .  "~/Dropbox/org/Calendars/(c)personal.org")
				 ("vvflqc81oth9ul9m9tl43k77ks@group.calendar.google.com" . "~/Dropbox/org/Calendars/(c)school.org")
				 ("9ekj1un8b2hbna9ej2j9uti3t0@group.calendar.google.com" . "~/Dropbox/org/Calendars/(c)work.org")
				 ("pa2l114catrgjslafjd4re6v7k@group.calendar.google.com" . "~/Dropbox/org/Calendars/(c)YoungLife.org")))))
     (org-gcal-refresh-token)
     (org-gcal-sync)
   #+END_SRC

* Email
** mu4e
*** General
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "/usr/local/Cellar/mu/0.9.18_1/share/emacs/site-lisp/mu/mu4e")
     (use-package mu4e
       :config
       (setq mu4e-contexts
	     `( ,(make-mu4e-context
		  :name "Personal"
		  :match-func (lambda (msg) (when msg
					      (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
		  :vars '(
			  (mu4e-sent-folder . "/Personal/[Gmail].Sent")
			  (mu4e-trash-folder . "/Personal/[Gmail].Trash")
			  (mu4e-drafts-folder . "/Personal/[Gmail].Drafts")
			  (mu4e-reply-to-address . "hgaines95@gmail.com")
			  (user-mail-address . "hgaines95@gmail.com")
			  (user-full-name . "Hadley Gaines")

			  ))
		,(make-mu4e-context
		  :name "School"
		  :match-func (lambda (msg) (when msg
					      (string-prefix-p "/School" (mu4e-message-field msg :maildir))))
		  :vars '(
			  (mu4e-sent-folder . "/School/[Gmail].Sent")
			  (mu4e-trash-folder . "/School/[Gmail].Trash")
			  (mu4e-drafts-folder . "/School/[Gmail].Drafts")
			  (mu4e-reply-to-address . "hgaines@umich.edu")
			  (user-mail-address . "hgaines@umich.edu")
			  (user-full-name . "Hadley Gaines")
			  ))))
       (add-to-list 'mu4e-marks
		    '(done
		      :char       "d"
		      :prompt     "done"
		      :show-target (lambda (target) "Done")
		      :action      (lambda (docid msg target)
				     (mu4e-action-retag-message msg "-\\Inbox"))))
       (mu4e~headers-defun-mark-for done)
       (mu4e~view-defun-mark-for done)
       ;;(setq mu4e-html2text-command "html2text -utf8 -nobs -width 72")
       (setq mu4e-html2text-command "w3m -T text/html")
       (setq mu4e-show-images nil)
       (setq mu4e-context-policy 'pick-first)
       (setq mu4e-headers-include-related nil)
       (setq mu4e-headers-results-limit 100)
       (setq mu4e-get-mail-command "offlineimap -o")
       :general
       (:keymaps 'mu4e-headers-mode-map
		 :states '(motion normal visual)
		 "d" 'mu4e-headers-mark-for-done)
       (:keymaps 'mu4e-view-mode-map
		 "d" 'mu4e-view-mark-for-done))
     (use-package evil-mu4e
       :ensure t)
   #+END_SRC
*** Actions
   #+BEGIN_SRC emacs-lisp
     (defvar mu4e-action-tags-header "X-Keywords"
       "Header where tags are stored. Used by `mu4e-action-retag-message'.
	Make sure it is one of the headers mu recognizes for storing
	tags: X-Keywords, X-Label, Keywords. Also note that changing
	this setting on already tagged messages can lead to messages
	with multiple tags headers.")

     (defvar mu4e-action-tags-completion-list '()
       "List of tags to show for autocompletion in
       `mu4e-action-retag-message'.")

     (defun mu4e~contains-line-matching (regexp path)
       "Determine whether the file at path contains a line matching
	the given regexp."
       (with-temp-buffer
	 (insert-file-contents path)
	 (save-excursion
	   (goto-char (point-min))
	   (if (re-search-forward regexp nil t)
	     t
	     nil))))

     (defun mu4e~replace-first-line-matching (regexp to-string path)
       "Replace the first line in the file at path that matches regexp
	with the string replace."
       (with-temp-file path
	 (insert-file-contents path)
	 (save-excursion
	   (goto-char (point-min))
	   (if (re-search-forward regexp nil t)
	     (replace-match to-string nil nil)))))

     (defun mu4e-action-retag-message (msg &optional retag-arg)
       "Change tags of a message. Accepts a comma-separated list of
	additions and removals.
	Example: +tag,+long tag,-oldtag
	would add 'tag' and 'long tag', and remove 'oldtag'."
       (let* (
	       (path (mu4e-message-field msg :path))
	       (maildir (mu4e-message-field msg :maildir))
	       (oldtags (mu4e-message-field msg :tags))
	       (tags-completion
		 (append
		   mu4e-action-tags-completion-list
		   (mapcar (lambda (tag) (format "+%s" tag))
		     mu4e-action-tags-completion-list)
		   (mapcar (lambda (tag) (format "-%s" tag))
		     oldtags)))
	       (retag (if retag-arg
			(split-string retag-arg ",")
			(completing-read-multiple "Tags: " tags-completion)))
	       (header  mu4e-action-tags-header)
	       (sep     (cond ((string= header "Keywords") ", ")
			  ((string= header "X-Label") " ")
			  ((string= header "X-Keywords") ", ")
			  (t ", ")))
	       (taglist (if oldtags (copy-sequence oldtags) '()))
	       tagstr)
	 (dolist (tag retag taglist)
	   (cond
	     ((string-match "^\\+\\(.+\\)" tag)
	       (setq taglist (push (match-string 1 tag) taglist)))
	     ((string-match "^\\-\\(.+\\)" tag)
	       (setq taglist (delete (match-string 1 tag) taglist)))
	     (t
	       (setq taglist (push tag taglist)))))

	 (setq taglist (sort (delete-dups taglist) 'string<))
	 (setq tagstr (mapconcat 'identity taglist sep))

	 (setq tagstr (replace-regexp-in-string "[\\&]" "\\\\\\&" tagstr))
	 (setq tagstr (replace-regexp-in-string "[/]"   "\\&" tagstr))

	 (if (not (mu4e~contains-line-matching (concat header ":.*") path))
	   ;; Add tags header just before the content
	   (mu4e~replace-first-line-matching
	     "^$" (concat header ": " tagstr "\n") path)

	   ;; replaces keywords, restricted to the header
	   (mu4e~replace-first-line-matching
	     (concat header ":.*")
	     (concat header ": " tagstr)
	     path))

	 (mu4e-message (concat "tagging: " (mapconcat 'identity taglist ", ")))
	 (mu4e-refresh-message path maildir)))

     (add-to-list 'mu4e-headers-actions '("retag message" . mu4e-action-retag-message) t)
     (add-to-list 'mu4e-view-actions '("retag message" . mu4e-action-retag-message) t)

     #+END_SRC
*** Bookmarks
    #+BEGIN_SRC emacs-lisp
      (setq mu4e-bookmarks '())
      (add-to-list 'mu4e-bookmarks
		   (make-mu4e-bookmark
		    :name  "Commercial"
		    :query "tag:\\\\Inbox AND tag:Promotions"
		    :key ?c))
      (add-to-list 'mu4e-bookmarks
		   (make-mu4e-bookmark
		    :name  "Primary"
		    :query "tag:\\\\Inbox AND tag:Primary"
		    :key ?p))
      (add-to-list 'mu4e-bookmarks
		   (make-mu4e-bookmark
		    :name  "Inbox"
		    :query "tag:\\\\Inbox"
		    :key ?i))
    #+END_SRC
*** mu4e alert
    #+BEGIN_SRC emacs-lisp
      (use-package mu4e-alert
	:ensure t
	:config
	(setq mu4e-alert-interesting-mail-query
	    (concat
	     "tag:\\\\Inbox"
	     " AND tag:Primary"))
	(mu4e-alert-set-default-style 'notifier)
	(mu4e-alert-enable-notifications)
	(defun gjstein-refresh-mu4e-alert-mode-line ()
	  (interactive)
	  (mu4e~proc-kill)
	  (mu4e-alert-enable-mode-line-display)
	  )
	(run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line)
	)
    #+END_SRC
** sending mail
*** SMTP
    #+BEGIN_SRC emacs-lisp
      (use-package smtpmail
	:ensure t
	:config
	(setq message-send-mail-function 'smtpmail-send-it
	      smtpmail-starttls-credentials
	      '(("smtp.gmail.com" 587 nil nil))
	      smtpmail-default-smtp-server "smtp.gmail.com"
	      smtpmail-smtp-server "smtp.gmail.com"
	      smtpmail-smtp-service 587
	      smtpmail-debug-info t))
    #+END_SRC
*** Message mode
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables '(message-kill-buffer-on-exit t))
      (setq message-citation-line-function 'message-insert-formatted-citation-line
	    message-cite-reply-position 'above
	    message-yank-prefix "    "
	    message-yank-cited-prefix "    "
	    message-yank-empty-prefix "    "
	    message-citation-line-format "On %e %B %Y %R, %f wrote:\n")

    #+END_SRC
** Org mode integration
   #+BEGIN_SRC emacs-lisp
     (require 'org-mu4e)
   #+END_SRC

* Latex
  #+BEGIN_SRC emacs-lisp
    (use-package tex
      :defer t
      :ensure auctex
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t))
  #+END_SRC

* PDF-Tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config
      (setq pdf-view-use-unicode-ligther nil)
      (pdf-tools-install)
      (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
  #+END_SRC

* Start Screen
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (use-package page-break-lines
	:ensure t)
      (dashboard-setup-startup-hook)
      (turn-on-page-break-lines-mode)
      (setq dashboard-items '((recents  . 10)
			      (bookmarks . 5)
			      (projects . 5))))
  #+END_SRC
