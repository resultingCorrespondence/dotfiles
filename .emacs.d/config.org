* unsorted
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package benchmark-init
    :ensure t
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
  (setq evil-want-keybinding nil)
  (setq evil-want-integration nil)
  (use-package evil
    :ensure t
    :config
    (setq evil-normal-state-tag "NORMAL")
    (setq evil-insert-state-tag "INSERT")
    (setq evil-visual-state-tag "VISUAL")
    (evil-mode 1)
    (use-package evil-easymotion
      :ensure t
      :config
      (evilem-default-keybindings ",")))
  (use-package linum-relative
    :ensure t
    :config
    (linum-relative-mode))



  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (which-key-declare-prefixes-for-mode 'org-mode
      "SPC c" "clock"
      "C-SPC i" "ivy")
    (global-set-key (kbd "C-?") 'which-key-show-major-mode))  

  (use-package general :ensure t)

  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )

  (setq org-src-fontify-natively t)


  (setq org-latex-compiler "xelatex")
  (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))
  (setq org-export-backends '(ascii html latex odt))

#+END_SRC
  
* Theme Setup
** List of installed themes
  #+BEGIN_SRC emacs-lisp
    ;;download themes
    (use-package color-theme-solarized
      :ensure t
      :defer t)
    (use-package zenburn-theme
      :ensure t
      :defer t)
    (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :defer t)
    (use-package moe-theme
      :ensure t
      :defer t)
    (use-package gruvbox-theme
      :ensure t
      :defer t)
    (use-package ample-theme
      :ensure t
      :defer t)
    (use-package afternoon-theme
      :ensure t
      :defer t)
    (use-package clues-theme
      :ensure t
      :defer t)
    (use-package bubbleberry-theme
      :ensure t
      :defer t)
    (use-package badger-theme
      :ensure t
      :defer t)
    (use-package atom-one-dark-theme
      :ensure t
      :defer t)
    (use-package tao-theme
      :ensure t
      :defer t)
    (use-package solarized-theme
      :ensure t
      :defer t)
    (use-package zerodark-theme
      :ensure t
      :defer t)
    (use-package doom-themes
      :ensure t
      :defer t)
    (use-package kaolin-themes
      :ensure t
      :defer t)
    (use-package nord-theme
      :ensure t
      :defer t)
    (use-package zeno-theme
      :ensure t
      :defer t)
    (use-package nordless-theme
      :ensure t
      :defer t)
    (use-package arjen-grey-theme
      :ensure t
      :defer t)
    (use-package planet-theme
      :ensure t
      :defer t)
    (use-package oceanic-theme
      :ensure t
      :defer t)
  #+END_SRC
** Themes setup
#+BEGIN_SRC emacs-lisp
  ;;select and load theme
  (setq theme 'spacemacs-light)
  (load-theme theme t)


  ;; customize faces for selected theme
  (defun spacemacs-light-loaded ()
    "Load the parameters for spacemacs-light."

    ;;set the variables
    (setq color-bg-white           "#fbf8ef"
	  color-bg-light           "#222425"
	  color-bg-dark            "#1c1e1f"
	  color-bg-darker          "#1c1c1c"
	  color-fg-white           "#ffffff"
	  color-shade-white        "#efeae9"
	  color-fg-light           "#655370"
	  color-dark-cyan          "#008b8b"
	  color-region-dark        "#2d2e2e"
	  color-region             "#39393d"
	  color-slate              "#8FA1B3"
	  color-keyword            "#f92672"
	  color-comment            "#525254"
	  color-builtin            "#fd971f"
	  color-purple             "#9c91e4"
	  color-doc                "#727280"
	  color-type               "#66d9ef"
	  color-string             "#b6e63e"
	  color-gray-dark          "#999"
	  color-gray               "#bbb"
	  sans-font          "Source Sans Pro"
	  serif-font         "Merriweather"
	  et-font            "EtBembo"
	  sans-mono-font     "Souce Code Pro"
	  serif-mono-font    "Verily Serif Mono")
    )

  (if (equal theme 'spacemacs-light) (spacemacs-light-loaded))



#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
(use-package counsel
    :ensure t
    :config
    (use-package flx
    :ensure t)
    (ivy-mode 1)
    (setq ivy-height 20)
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))))
#+END_SRC
* Linting
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck :ensure t
    :config
    (global-flycheck-mode))
  #+END_SRC
* Autocompletion
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (add-hook 'emacs-lisp-mode-hook
		(lambda ()
		  (setq company-mode 1))))
  #+END_SRC
* Org Mode [0/1] 
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :config
      (if (equal theme 'spacemacs-light)
	  (progn
	    (set-face-attribute 'variable-pitch nil
				:family "EtBembo"
				:height 150
				:foreground color-bg-dark)
	    (set-face-attribute 'org-document-title nil
				:foreground color-bg-dark
				:height 1.5
				:weight 'bold)
	    (set-face-attribute 'org-done nil
				:strike-through t
				:foreground color-dark-cyan
				:background nil)
	    (org-indent-mode t)
	    (set-face-attribute 'org-indent nil
				:inherit '(org-hide fixed-pitch))
	    (set-face-attribute 'org-todo nil
				:foreground color-builtin
				:background nil)
	    (set-face-attribute 'org-level-1 nil
				:foreground color-bg-dark
				:height 1.3
				:weight 'bold)
	    (set-face-attribute 'org-level-2 nil
				:foreground color-bg-dark
				:height 1.2)
	    (set-face-attribute 'org-level-3 nil
				:foreground color-bg-dark
				:height 1.1)
	    (set-face-attribute 'org-level-4 nil
				:foreground color-bg-dark
				:height 1.0)
	    (set-face-attribute 'org-level-5 nil
				:foreground color-bg-dark
				:height 1.0)
	    (set-face-attribute 'org-level-6 nil
				:foreground color-bg-dark
				:height 1.0)
	    (set-face-attribute 'org-level-7 nil
				:foreground color-bg-dark
				:height 1.0)
	    (set-face-attribute 'org-level-8 nil
				:foreground color-bg-dark
				:height 1.0))))
    ;  :custom-face
    ;  (variable-pitch ((t (:family "EtBembo"
    ;			       :height 130
    ;			       :foreground "#1c1e1f"))))
    ;  (org-document-title ((t (:foreground "#171717" :weight bold :height 1.5))))
    ;  (org-done ((t (:background "#E8E8E8" :foreground "#0E0E0E" :strike-through t :weight bold))))
    ;  (org-headline-done ((t (:foreground "#171717" :strike-through t))))
    ;  (org-level-1 ((t (:foreground "#1c1e1f" :weight bold :height 1.3))))
    ;  (org-level-2 ((t (:foreground "#1c1e1f" :weight bold :height 1.2))))
    ;  (org-level-3 ((t (:foreground "#1c1e1f" :weight bold :height 1.1))))
    ;  (org-level-4 ((t (:foreground "#1c1e1f" :weight bold :height 1.1))))
    ;  (org-level-5 ((t (:foreground "#1c1e1f" :weight bold :height 1.1))))
    ;  (org-level-6 ((t (:foreground "#1c1e1f" :weight bold :height 1.1))))
    ;  (org-level-7 ((t (:foreground "#1c1e1f" :weight bold :height 1.1))))
    ;  (org-level-8 ((t (:foreground "#1c1e1f" :weight bold :height 1.1))))
    ;  (org-image-actual-width '(600)))

    (add-hook 'org-mode-hook
	      '(lambda ()
		 (setq line-spacing 0.2) ;; Add more line padding for readability
		 (variable-pitch-mode 1) ;; All fonts with variable pitch.
		 (org-indent-mode t)
		 (mapc
		  (lambda (face) ;; Other fonts with fixed-pitch.
		    (set-face-attribute face nil :inherit 'fixed-pitch))
		  (list 'org-code
			'org-link
			'org-block
			'org-table
			'org-verbatim
			'org-block-begin-line
			'org-block-end-line
			'org-meta-line
			'org-document-info-keyword))))
  #+END_SRC
** Org-bullets
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda ()
                                 (org-bullets-mode 1)
                                 (flyspell-mode))))
  #+END_SRC
** Code Blocks
*** Don't spellcheck code blocks
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))
    #+END_SRC
** TODO Publishing
*** TODO Export Location
    #+BEGIN_SRC emacs-lisp
      (setq org-publish-project-alist
            '("all" :publishing-directory "~/Dropbox/org/Export")
            )
    #+END_SRC
** General config
   #+BEGIN_SRC emacs-lisp
     (setq org-M-RET-may-split-line 'nil)
     (setq org-agenda-timegrid-use-ampm t)
   #+END_SRC
** Agenda view
   #+BEGIN_SRC emacs-lisp
     ;;(setq org-agenda-prefix-format "%c: %b")
     (setq org-agenda-skip-scheduled-if-done t
	   org-agenda-skip-deadline-if-done  t)

     (setq org-agenda-files '("~/Dropbox/org" "~/Dropbox/org/Calendars"))
   #+END_SRC
** Custom agenda Commands
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-custom-commands
	   '(("d" "Days Agenda View"
	      ((tags "Big_Date+TIMESTAMP<=\"<+2w>\""
		     ((org-agenda-overriding-header "Upcoming Big Dates:")
		      (org-agenda-prefix-format "% s")
		      (org-agenda-remove-tags "Big_Date")
		      ))
	       (agenda "" ((org-agenda-span 'day)t))))))
   #+END_SRC
** Archive Settings
   #+BEGIN_SRC emacs-lisp
     (setq org-archive-location "~/Dropbox/org/Archive/%s_archive::")
   #+END_SRC
** PDF Tools
   #+BEGIN_SRC emacs-lisp
     (use-package org-pdfview
       :ensure t
       :defer t
       :config
       (eval-after-load 'org '(require 'org-pdfview)))
   #+END_SRC
** small packages
   #+BEGIN_SRC emacs-lisp
     (use-package org-pomodoro
       :ensure t
       :defer t)
   #+END_SRC
* Other packages
** flyspell-ivy
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell-correct-ivy
       :ensure t)
   #+END_SRC
** evil-collection
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
       :ensure t
       :custom (evil-collection-setup-minibuffer t)
       :init
       (evil-collection-init))
   #+END_SRC
* Modeline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
     :ensure t
     :config

     (use-package spaceline-config
       :ensure spaceline
       :config
       (spaceline-spacemacs-theme)
       (spaceline-helm-mode)
       (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
       (setq powerline-default-separator 'slant)
       (setq powerline-image-apple-rgb t)
       (setq powerline-height 20)
       (spaceline-toggle-buffer-size-off)
       (mu4e-alert-enable-mode-line-display)
       (spaceline-toggle-mu4e-alert-segment-on)
       (spaceline-compile)
       )
     (use-package diminish :ensure t
       :config
       (diminish 'undo-tree-mode)
       (diminish 'which-key-mode)
       (diminish 'flyspell-mode)
       (diminish 'ivy-mode)
       (diminish 'flycheck-mode)
       (diminish 'overwrite-mode)
    ))
  #+END_SRC
* Key Bindings
** Leaders
   #+BEGIN_SRC emacs-lisp
     (general-def :states '(normal motion emacs) "SPC" nil)
     (setq general-leader "SPC SPC")
     (setq major-mode-leader "SPC")
   #+END_SRC
** Org Mode
*** Motion
    #+BEGIN_SRC emacs-lisp
      (general-define-key :states '(normal visual)
                          :keymaps 'org-mode-map
                          "{" 'outline-previous-visible-heading
                          "}" 'outline-next-visible-heading
                          "H" 'org-shiftleft
                          "J" 'org-shiftdown
                          "K" 'org-shiftup
                          "L" 'org-shiftright)
    #+END_SRC
*** Structure Editing
    #+BEGIN_SRC emacs-lisp
      (general-define-key :states 'normal
                          :keymaps 'org-mode-map
                          :prefix major-mode-leader
                          "*" 'org-toggle-heading
                          "^" 'org-sort)
       
    #+END_SRC
*** Other
   #+BEGIN_SRC emacs-lisp
     (general-define-key :states 'normal
			 :keymaps 'org-mode-map
			 :prefix major-mode-leader
			 "t" 'org-todo
			 "c i" 'org-clock-in
			 "c x" 'org-clock-in-last
			 "c o" 'org-clock-out
			 "c j" 'org-clock-goto
			 "c q" 'org-clock-cancel
			 "c d" 'org-clock-display
			 "c r" 'org-clock-report
			 "c z" 'org-resolve-clocks
			 "c p" 'org-pomodoro
			 "c y" 'org-evaluate-time-range
			 "c e" 'org-set-effort
			 "c E" 'org-clock-modify-effort-estimate
			 "e"   'org-export-dispatch
			 "a"   'org-agenda
			 "d"   'org-deadline
			 "s"   'org-schedule
			 )

   #+END_SRC

*** Agenda mode
    #+BEGIN_SRC emacs-lisp
      (general-define-key :states 'emacs
                          :keymaps 'org-agenda-mode-map
                          "j" 'org-agenda-next-line
                          "k" 'org-agenda-previous-line
                          "p" 'org-agenda-capture
                          "g" 'org-agenda-goto-date)
    #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
     (general-define-key :states '(normal motion)
			 :prefix general-leader
			 "i b" 'ivy-switch-buffer
			 "i f" 'counsel-find-file
			 "i s" 'flyspell-correct-previous-word-generic
			 "i S" 'flyspell-correct-word-generic
			 "i t" 'counsel-load-theme)

     (general-define-key :keymaps 'ivy-minibuffer-map
			 "RET" 'ivy-alt-done)
   #+END_SRC
** Email
   #+BEGIN_SRC emacs-lisp
     (general-define-key :states '(normal motion)
			 :prefix general-leader
			 "m" 'mu4e)
   #+END_SRC
* Other
** Backups
   #+BEGIN_SRC emacs-lisp
     (setq
        backup-by-copying t      ; don't clobber symlinks
        backup-directory-alist
         '(("." . "~/.saves"))    ; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)       ; use versioned backups
   #+END_SRC
